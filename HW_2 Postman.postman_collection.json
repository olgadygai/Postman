{
	"info": {
		"_postman_id": "2a421a0d-3dd1-49e3-a8cf-c2c3c6448b34",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string. \r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"\r",
							"// ВАРИАНТ 1: \r",
							"// var responseBody = pm.response.json();\r",
							"\r",
							"var responseBody = JSON.parse(responseBody);\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Name in response equals name in request\", function () {\r",
							"       pm.expect(responseBody.name).to.eql(\"Olga\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"// pm.test(\"Age in response equals age in request\", function () {\r",
							"//        pm.expect(+responseBody.age).to.eql(28);\r",
							"// });\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"       pm.expect(parseInt(responseBody.age)).to.eql(28);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Salary in response equals salary in request\", function () {\r",
							"       pm.expect(responseBody.salary).to.eql(700);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"\r",
							"var requestBody = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let name = requestBody.name\r",
							"\r",
							"pm.test(\"Name in response equals name in request\", function () {\r",
							"       pm.expect(responseBody.name).to.eql(name);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let age = parseInt(requestBody.age);\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"       pm.expect(parseInt(responseBody.age)).to.eql(age);\r",
							"});\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"       pm.expect(parseInt(responseBody.age)).to.eql(age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let salary = parseInt(requestBody.salary);\r",
							"\r",
							"pm.test(\"Salary in response equals salary in request\", function () {\r",
							"       pm.expect(parseInt(requestBody.salary)).to.eql(salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"let responseFamily = responseBody.family; \r",
							"\r",
							"console.log(\"Family = \",  responseFamily);\r",
							"\r",
							"//Console\r",
							"\r",
							"// Family = \r",
							"// {children: [2], u_salary_1_5_year: 2800}\r",
							"// children: [2]\r",
							"// 0: [2]\r",
							"// 0: \"Alex\"\r",
							"// 1: 24\r",
							"// 1: [2]\r",
							"// 0: \"Kate\"\r",
							"// 1: 12\r",
							"// u_salary_1_5_year: 2800\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year in response equals salary*4 in request\", function () {\r",
							"       pm.expect(responseBody.family.u_salary_1_5_year).to.eql(requestBody.salary * 4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var responseBody = JSON.parse(responseBody);\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"let reqURL = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name in response equals name in request\", function () {\r",
							"       pm.expect(responseBody.name).to.eql(reqURL.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"       pm.expect(responseBody.age).to.eql(reqURL.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary in responce equals salary in request\", function () {\r",
							"       pm.expect(responseBody.salary).to.eql(parseInt(reqURL.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(responseBody.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"let respDog = responseBody.family.pets.dog; \r",
							"\r",
							"pm.test(\"Сheck that the dog to have property name\", function () {\r",
							"       pm.expect(respDog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Сheck that the dog to have property age\", function () {\r",
							"       pm.expect(respDog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check that the property name is Luky\", function () {\r",
							"       pm.expect(respDog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check that the age property is 4\", function () {\r",
							"       pm.expect(respDog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olga&age=28&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"\r",
							"var responseBody = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request.\r",
							"\r",
							"let reqURL = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Name in response equals name in request\", function () {\r",
							"        pm.expect(responseBody.name).to.eql(reqURL.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Age in response equals age in request\", function () {\r",
							"        pm.expect(responseBody.age).to.eql(parseInt(reqURL.age));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(\"Параметр salary из request =\", reqURL.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(\"Параметр salary из response =\", responseBody.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(\"0-й элемент параметра salary из response =\", responseBody.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(\"1-й элемент параметра salary параметр salary из response =\", parseInt(responseBody.salary[1]));\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(\"2-й элемент параметра salary параметр salary из response =\", parseInt(responseBody.salary[2]));\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary [0] in response equals salary in request\", function () {\r",
							"        pm.expect(responseBody.salary[0]).to.eql(parseInt(reqURL.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary [1] in response equals salary*2 in request\", function () {\r",
							"        pm.expect(parseInt(responseBody.salary[1])).to.eql(reqURL.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary [2] in response equals salary*3 in request\", function () {\r",
							"        pm.expect(parseInt(responseBody.salary[2])).to.eql(reqURL.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name - создала\r",
							"//Создать в окружении переменную age - создала\r",
							"//Создать в окружении переменную salary - создала\r",
							"\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", responseBody.name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", responseBody.age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", responseBody.salary[0]);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// Значения выведены в консоль через интерполяцию строк.\r",
							"\r",
							"var salary = responseBody.salary;\r",
							"\r",
							"for (var i=0; i < salary.length; i++){\r",
							"   console.log(`Salary ${i}: ${salary[i]}`)\r",
							"};\r",
							"//или\r",
							"// for (var i=0; i < salary.length; i++){\r",
							"//     console.log(salary[i])\r",
							"// };\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olga&age=28&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							" var responseBody = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"\r",
							"var requestBody = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Response to have property start_qa_salary\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Response to have property qa_salary_after_6_months\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Response to have property qa_salary_after_6_months\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Response to have property qa_salary_after_1.5_year\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Response to have property qa_salary_after_3.5_years\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Response to have property person\", function () {\r",
							"      pm.expect(responseBody).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary in response equals salary in request\", function () {\r",
							"      pm.expect(responseBody.start_qa_salary).to.eql(parseInt(requestBody.salary));\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months in response equals salary*2 in request\", function () {\r",
							"      pm.expect(responseBody.qa_salary_after_6_months).to.eql(requestBody.salary*2);\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months in response equals salary*2.7 in request\", function () {\r",
							"      pm.expect(responseBody.qa_salary_after_12_months).to.eql(requestBody.salary*2.7);\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"//let salary15 = responseBody[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year in response equals salary*3.3 in request\", function () {\r",
							"       pm.expect(responseBody[\"qa_salary_after_1.5_year\"]).to.eql(requestBody.salary*3.3);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years in response equals salary*3.3 in request\", function () {\r",
							"       pm.expect(responseBody[\"qa_salary_after_3.5_years\"]).to.eql(requestBody.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years in response equals salary*3.3 in request\", function () {\r",
							"       pm.expect(responseBody[\"qa_salary_after_3.5_years\"]).to.eql(requestBody.salary*3.8);\r",
							"});\r",
							"\r",
							"//  Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"First property u_name in response equals salary in request\", function () {\r",
							"       pm.expect(responseBody.person.u_name[1]).to.eql(parseInt(requestBody.salary));\r",
							"});\r",
							"\r",
							"//  Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"u_age in response equals age in request\", function () {\r",
							"       pm.expect(responseBody.person.u_age).to.eql(parseInt(requestBody.age));\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years in response equals salary*4.2 in request\", function () {\r",
							"       pm.expect(responseBody.person.u_salary_5_years).to.eql(requestBody.salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"var person = responseBody.person;\r",
							"\r",
							"for (key in person){\r",
							"   console.log(key, person[key])\r",
							"}\r",
							"\r",
							"//Console\r",
							"\r",
							"// u_age\r",
							"// 28\r",
							" \r",
							"// u_name\r",
							"// (3) [\"Olga\", 700, 28]\r",
							"// 0: \"Olga\"\r",
							"// 1: 700\r",
							"// 2: 28\r",
							" \r",
							"// u_salary_5_years\r",
							"// 2940\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}